// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// CreateEmployee defines model for CreateEmployee.
type CreateEmployee struct {
	FirstName  string `json:"first_name"`
	LastName   string `json:"last_name"`
	PositionId string `json:"position_id"`
}

// CreatePosition defines model for CreatePosition.
type CreatePosition struct {
	Name   string `json:"name"`
	Salary int    `json:"salary"`
}

// Employee defines model for Employee.
type Employee struct {
	// FirstName Employee first name
	FirstName *string `json:"first_name,omitempty"`

	// Id ID of employee
	Id *string `json:"id,omitempty"`

	// LastName Employee last name
	LastName *string `json:"last_name,omitempty"`

	// PositionId Employee position id
	PositionId *string `json:"position_id,omitempty"`
}

// Position defines model for Position.
type Position struct {
	// Id ID of position
	Id *string `json:"id,omitempty"`

	// Name Position name
	Name *string `json:"name,omitempty"`

	// Salary Position salary
	Salary *int `json:"salary,omitempty"`
}

// UpdateEmployee defines model for UpdateEmployee.
type UpdateEmployee struct {
	FirstName  string `json:"first_name"`
	LastName   string `json:"last_name"`
	PositionId string `json:"position_id"`
}

// UpdatePosition defines model for UpdatePosition.
type UpdatePosition struct {
	Name   string `json:"name"`
	Salary int    `json:"salary"`
}

// GetEmployeeListParams defines parameters for GetEmployeeList.
type GetEmployeeListParams struct {
	// Cursor Pagination cursor for next page.
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetPositionListParams defines parameters for GetPositionList.
type GetPositionListParams struct {
	// Cursor Pagination cursor for next page.
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// CreateEmployeeJSONRequestBody defines body for CreateEmployee for application/json ContentType.
type CreateEmployeeJSONRequestBody = CreateEmployee

// UpdateEmployeeByIDJSONRequestBody defines body for UpdateEmployeeByID for application/json ContentType.
type UpdateEmployeeByIDJSONRequestBody = UpdateEmployee

// CreatePositionJSONRequestBody defines body for CreatePosition for application/json ContentType.
type CreatePositionJSONRequestBody = CreatePosition

// UpdatePositionByIDJSONRequestBody defines body for UpdatePositionByID for application/json ContentType.
type UpdatePositionByIDJSONRequestBody = UpdatePosition

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get employee list
	// (GET /employee)
	GetEmployeeList(c *gin.Context, params GetEmployeeListParams)
	// Create employee
	// (POST /employee)
	CreateEmployee(c *gin.Context)
	// Delete employee by id
	// (DELETE /employee/{id})
	DeleteEmployeeByID(c *gin.Context, id string)
	// Get employee by id
	// (GET /employee/{id})
	GetEmployeeByID(c *gin.Context, id string)
	// Update employee by id
	// (PUT /employee/{id})
	UpdateEmployeeByID(c *gin.Context, id string)
	// Get position list
	// (GET /position)
	GetPositionList(c *gin.Context, params GetPositionListParams)
	// Create position
	// (POST /position)
	CreatePosition(c *gin.Context)
	// Delete position by id
	// (DELETE /position/{id})
	DeletePositionByID(c *gin.Context, id string)
	// Get position by id
	// (GET /position/{id})
	GetPositionByID(c *gin.Context, id string)
	// Update position by id
	// (PUT /position/{id})
	UpdatePositionByID(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetEmployeeList operation middleware
func (siw *ServerInterfaceWrapper) GetEmployeeList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEmployeeListParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cursor: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEmployeeList(c, params)
}

// CreateEmployee operation middleware
func (siw *ServerInterfaceWrapper) CreateEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEmployee(c)
}

// DeleteEmployeeByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteEmployeeByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteEmployeeByID(c, id)
}

// GetEmployeeByID operation middleware
func (siw *ServerInterfaceWrapper) GetEmployeeByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEmployeeByID(c, id)
}

// UpdateEmployeeByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateEmployeeByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateEmployeeByID(c, id)
}

// GetPositionList operation middleware
func (siw *ServerInterfaceWrapper) GetPositionList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPositionListParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cursor: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPositionList(c, params)
}

// CreatePosition operation middleware
func (siw *ServerInterfaceWrapper) CreatePosition(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePosition(c)
}

// DeletePositionByID operation middleware
func (siw *ServerInterfaceWrapper) DeletePositionByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePositionByID(c, id)
}

// GetPositionByID operation middleware
func (siw *ServerInterfaceWrapper) GetPositionByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPositionByID(c, id)
}

// UpdatePositionByID operation middleware
func (siw *ServerInterfaceWrapper) UpdatePositionByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdatePositionByID(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/employee", wrapper.GetEmployeeList)
	router.POST(options.BaseURL+"/employee", wrapper.CreateEmployee)
	router.DELETE(options.BaseURL+"/employee/:id", wrapper.DeleteEmployeeByID)
	router.GET(options.BaseURL+"/employee/:id", wrapper.GetEmployeeByID)
	router.PUT(options.BaseURL+"/employee/:id", wrapper.UpdateEmployeeByID)
	router.GET(options.BaseURL+"/position", wrapper.GetPositionList)
	router.POST(options.BaseURL+"/position", wrapper.CreatePosition)
	router.DELETE(options.BaseURL+"/position/:id", wrapper.DeletePositionByID)
	router.GET(options.BaseURL+"/position/:id", wrapper.GetPositionByID)
	router.PUT(options.BaseURL+"/position/:id", wrapper.UpdatePositionByID)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYTW/jNhD9KwTbo2Bpm71Ut92mKAwUhYGip0WwYKSxzIVEckkqXSHQfy9I6osW5WiT",
	"uLGLnhJYQ87HmzfzpEec8UpwBkwrnD5ilR2gIvbfXyQQDb9WouQNgPlFSC5Aagr2+Z5KpT8zUtlnuhGA",
	"U6y0pKzAbYRLcuqp4IpqytlnmgeetxGW8LWmEnKcfpp6mt7r33IX9bfw+y+QaePFpbDrrOYpLIanSElk",
	"M3lEmYYC5Cy0LpDOPhTD2gLmoDJJhQt0OIWsEerczOJ01fOPbm8R3yPo3UZPQLPg19gsuj1Cb+GK3grR",
	"fH5JGyjVMlDLefZOQmGGU+y9LGY3gr9wsDOIQs0xS+ovkV87jVwKb0kjY0/Zns9B+bDboj2XQ78rAwvV",
	"JUw6UaEPuy2O8ANI5U692ySbxETIBTAiKE7xzSbZ3JhiEH2wWcUwwawAPff9G2iFSFl6zk1hiDHY5s6k",
	"j+J3qrS9X5IKNEiF00+zFiMFZfY0ymqpuLS5MfimkSAFbLApA07x1xpsA7rKY2drCmjHd6gV7kzBleBM",
	"Ocx+ShLzJ+NMA7O5ESFKmlnn8RflcB7v8xHvHIYwz4m2B6iGytr+KGGPU/xDPG6auFsz8UCLkTlEStKE",
	"qGR+8qv1Z51loJQ1VnVV2V4zJR8AQaUruiaFKTcegbpz7Amg6paGGu/4m+oDKugDsOlI28ywPlqYrsNB",
	"6Y88b76r1qcqduSkbR2VXoDsOnzWVt/F562fQO3baKRX/Ejz1sFQgrZs8+t6a3/vQ/nYbG+fotGwgqyp",
	"ZYyh9UgYu5HGAaRlDf8eeSpQihQ2UfhGKmFnleqquWJRnoAiwu+T968d2kAExjXa85rlz4vyj+G43zIO",
	"35Fv902nGIKk7Sbx4pi9xv54MQWvEndvUJ8GXdQB0H1l9Wa4v/6MP5KMlzDjr7LBXB3X9ZjZSGKicE8L",
	"vt4yKPh6ofy/4Js32/AS8cqCbxBmR4JvgPRpvTd5kwzput34+Hy6bizPeTk/9fNdum76uj0v8ZREAVnn",
	"+3FrXyEygnffuMkc0n99yGvmvPs0oA+TbxCao3tALpb8nEt/4ZtB5xl1Om9fl2VzprE65PzCsbqb3xMU",
	"blP4vPnqkW95oC4SbzJLn4f6xYu7VTy86CY5Je7WNUan7fxr3er2hsPkNTwHTWg5X77+h6q37plzCcNL",
	"WBLDbKhtSP+tudbpxjXtaw+CfOi7q5YlTvFBa5HGcckzUh640ulNkvwcE0Hjh3e4vWv/CQAA//+jP886",
	"dhkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
