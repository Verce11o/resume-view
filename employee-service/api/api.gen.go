// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CreateEmployee defines model for CreateEmployee.
type CreateEmployee struct {
	FirstName    string `binding:"required" json:"first_name"`
	LastName     string `binding:"required" json:"last_name"`
	PositionName string `binding:"required" json:"position_name"`
	Salary       int    `binding:"required" json:"salary"`
}

// CreatePosition defines model for CreatePosition.
type CreatePosition struct {
	Name   string `binding:"required" json:"name"`
	Salary int    `binding:"required" json:"salary"`
}

// Employee defines model for Employee.
type Employee struct {
	// FirstName Employee first name
	FirstName *string `json:"first_name,omitempty"`

	// Id ID of employee
	Id *string `json:"id,omitempty"`

	// LastName Employee last name
	LastName *string `json:"last_name,omitempty"`

	// PositionId Employee position id
	PositionId *string `json:"position_id,omitempty"`
}

// Position defines model for Position.
type Position struct {
	// Id ID of position
	Id *string `json:"id,omitempty"`

	// Name Position name
	Name *string `json:"name,omitempty"`

	// Salary Position salary
	Salary *int `json:"salary,omitempty"`
}

// SignInEmployee defines model for SignInEmployee.
type SignInEmployee struct {
	Id string `binding:"required" json:"id"`
}

// UpdateEmployee defines model for UpdateEmployee.
type UpdateEmployee struct {
	FirstName  string `binding:"required" json:"first_name"`
	LastName   string `binding:"required" json:"last_name"`
	PositionId string `binding:"required" json:"position_id"`
}

// UpdatePosition defines model for UpdatePosition.
type UpdatePosition struct {
	Name   string `binding:"required" json:"name"`
	Salary int    `binding:"required" json:"salary"`
}

// SignInJSONBody defines parameters for SignIn.
type SignInJSONBody struct {
	Id *string `json:"id,omitempty"`
}

// GetEmployeeListParams defines parameters for GetEmployeeList.
type GetEmployeeListParams struct {
	// Cursor Pagination cursor for next page
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetPositionListParams defines parameters for GetPositionList.
type GetPositionListParams struct {
	// Cursor Pagination cursor for next page
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// SignInJSONRequestBody defines body for SignIn for application/json ContentType.
type SignInJSONRequestBody SignInJSONBody

// CreateEmployeeJSONRequestBody defines body for CreateEmployee for application/json ContentType.
type CreateEmployeeJSONRequestBody = CreateEmployee

// UpdateEmployeeByIDJSONRequestBody defines body for UpdateEmployeeByID for application/json ContentType.
type UpdateEmployeeByIDJSONRequestBody = UpdateEmployee

// CreatePositionJSONRequestBody defines body for CreatePosition for application/json ContentType.
type CreatePositionJSONRequestBody = CreatePosition

// UpdatePositionByIDJSONRequestBody defines body for UpdatePositionByID for application/json ContentType.
type UpdatePositionByIDJSONRequestBody = UpdatePosition

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Sign In as an employee
	// (POST /auth/signin)
	SignIn(c *gin.Context)
	// Get employee list
	// (GET /employee)
	GetEmployeeList(c *gin.Context, params GetEmployeeListParams)
	// Create employee
	// (POST /employee)
	CreateEmployee(c *gin.Context)
	// Delete employee by id
	// (DELETE /employee/{id})
	DeleteEmployeeByID(c *gin.Context, id string)
	// Get employee by id
	// (GET /employee/{id})
	GetEmployeeByID(c *gin.Context, id string)
	// Update employee by id
	// (PUT /employee/{id})
	UpdateEmployeeByID(c *gin.Context, id string)
	// Get position list
	// (GET /position)
	GetPositionList(c *gin.Context, params GetPositionListParams)
	// Create position
	// (POST /position)
	CreatePosition(c *gin.Context)
	// Delete position by id
	// (DELETE /position/{id})
	DeletePositionByID(c *gin.Context, id string)
	// Get position by id
	// (GET /position/{id})
	GetPositionByID(c *gin.Context, id string)
	// Update position by id
	// (PUT /position/{id})
	UpdatePositionByID(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SignIn operation middleware
func (siw *ServerInterfaceWrapper) SignIn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignIn(c)
}

// GetEmployeeList operation middleware
func (siw *ServerInterfaceWrapper) GetEmployeeList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEmployeeListParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cursor: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEmployeeList(c, params)
}

// CreateEmployee operation middleware
func (siw *ServerInterfaceWrapper) CreateEmployee(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEmployee(c)
}

// DeleteEmployeeByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteEmployeeByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteEmployeeByID(c, id)
}

// GetEmployeeByID operation middleware
func (siw *ServerInterfaceWrapper) GetEmployeeByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEmployeeByID(c, id)
}

// UpdateEmployeeByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateEmployeeByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateEmployeeByID(c, id)
}

// GetPositionList operation middleware
func (siw *ServerInterfaceWrapper) GetPositionList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPositionListParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cursor: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPositionList(c, params)
}

// CreatePosition operation middleware
func (siw *ServerInterfaceWrapper) CreatePosition(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePosition(c)
}

// DeletePositionByID operation middleware
func (siw *ServerInterfaceWrapper) DeletePositionByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePositionByID(c, id)
}

// GetPositionByID operation middleware
func (siw *ServerInterfaceWrapper) GetPositionByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPositionByID(c, id)
}

// UpdatePositionByID operation middleware
func (siw *ServerInterfaceWrapper) UpdatePositionByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdatePositionByID(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/signin", wrapper.SignIn)
	router.GET(options.BaseURL+"/employee", wrapper.GetEmployeeList)
	router.POST(options.BaseURL+"/employee", wrapper.CreateEmployee)
	router.DELETE(options.BaseURL+"/employee/:id", wrapper.DeleteEmployeeByID)
	router.GET(options.BaseURL+"/employee/:id", wrapper.GetEmployeeByID)
	router.PUT(options.BaseURL+"/employee/:id", wrapper.UpdateEmployeeByID)
	router.GET(options.BaseURL+"/position", wrapper.GetPositionList)
	router.POST(options.BaseURL+"/position", wrapper.CreatePosition)
	router.DELETE(options.BaseURL+"/position/:id", wrapper.DeletePositionByID)
	router.GET(options.BaseURL+"/position/:id", wrapper.GetPositionByID)
	router.PUT(options.BaseURL+"/position/:id", wrapper.UpdatePositionByID)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYW2/jNhP9KwS/71GO7MS9xG9J0wYuiiLAdtGHwChoaSxzIZFckkrjBvrvBUndL7HW",
	"sbtJ2rfE4nCGc86cGfIJBzwRnAHTCi+esAq2kBD75w8SiIYfExHzHYD5RUguQGoK9vuGSqX/YCSx3/RO",
	"AF5gpSVlEfbw44QTQScBDyECNoFHLclEk8iarikLzbIFlvA5pRJCnGUejsmRNxRcUU05O+qmisRE7mq7",
	"UaYhAnnQdplX/be4r+e0no72ScogVl4RBF9/gkDjzMtxu8sNuri9lVzsP+lYboagAkmFS0dphewilLtp",
	"ZiPzMA27pssbxDcICrc9Vg0KD/g1awbdlkD3+S+3KFYhGnY3yXpSNUyH4XMWTvrC7D9i4WXwdBVfBgzz",
	"BV6bT72H+kAjtmTDLHBHeznPW8SkYS8bP4rw3ejliTK3X96eze371zTjHoJUUr37YDqxO901EAnyKtVb",
	"68f+9xOXCdF4gX/+/TfsYWqqaAsktHHaLm72dWurctpqLVxUlG14tw6v7pZow2UpccqYUh1DTXwUurpb",
	"Yg8/gFTOanY2PZsamLgARgTFC3xxNj27MMASvbVn8Emqt76iEaMOP65017+paIUoQ0Qhwsow0J9Ub53W",
	"GdSJWb0M8/VLI1AmyaD0NQ8tcgFnGph1QISIaWBN/E/KkcdNOUOCAY8kEfbIAJvLy/UMJvPZt/PJ/OKb",
	"+YTML8PJ+WXw3TqE8+9nF8EY/c15oARnynk6n06/KM7/S9jgBf6fX41rfj6r+S0ZtM5aaU2DAJQyEM2n",
	"sxckKAGlSATNLFH2QGIajuxF3eg+MsMNLulfRQWmSWJL0OKLlm06GDe26O6xscQrY+RDTXkj6CHXLWiF",
	"SBw32N3k0y3oIo+/UKUtgSVJQIM07jpti0SUWWsUpFJxaYuHwaNGwqQpr8vPKdie5lQKu6VFmZKubmXZ",
	"6oV0aaKWO+z68XBItDWgGhK1j2gVxUpUiZRkNw7mkoQNhG9BV2Ueu5wX4FY4rVxz6gHVTbuqJRUBly5/",
	"RpHrg0wT7tYV53AZeS5rLScnFoNRMlBrM5bV9QZzvzLsqwBy4ffVXh2eegH6TzTMHFIxaFuPzbTf2N+L",
	"SK93y5t9hVYOvnapLSrTWaqastpTdVotU/jn6qtXFVWe7IMksSHY82OHVtYK4xpteMoOFO5fS/MvYpSD",
	"v6rY9S5vHb1ln0v5oE6/Rfq8uIDfEi36pf550EXaA3rzgvXVcD9+h2jdHF9Dh3iPuuPSPI6Cpp+J2nXz",
	"+YGyWNk7UBa31v8Gyg4Vywv9kQfK8nmsNVCWiO6fJ/fMjHfV59PNjFV6TqsIdT/HnBnrD4hdBOol1jMy",
	"NsNwM4NCpMJ2vXOy3jdbFica0yTcY6fe1l5VNUdrQC6W8JQTw8AraO4Z5TPkJo3j3Yk0uTzzCzX5rrvP",
	"IUNhHd2GODdKd1iNB8u2JsSHkeLVD46jqvhVc+i5wXEcMfK5sfW+ZPt+QzvsI0FEH8DUmiY07nbu5pPz",
	"1+bMqYbO19BiSulIbUj/KtnLZ9Ix7Hb7yoeCfKmM8xf9he/HPCDxliu9uJhOL30iqP8ww9kq+zsAAP//",
	"ebeSG+EfAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
