// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/Verce11o/resume-view/employee-service/internal/domain"
	mock "github.com/stretchr/testify/mock"

	models "github.com/Verce11o/resume-view/employee-service/internal/models"

	uuid "github.com/google/uuid"
)

// EmployeeRepository is an autogenerated mock type for the EmployeeRepository type
type EmployeeRepository struct {
	mock.Mock
}

// CreateEmployee provides a mock function with given fields: ctx, req
func (_m *EmployeeRepository) CreateEmployee(ctx context.Context, req domain.CreateEmployee) (models.Employee, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmployee")
	}

	var r0 models.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateEmployee) (models.Employee, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateEmployee) models.Employee); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.Employee)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.CreateEmployee) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmployee provides a mock function with given fields: ctx, id
func (_m *EmployeeRepository) DeleteEmployee(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmployee")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEmployee provides a mock function with given fields: ctx, id
func (_m *EmployeeRepository) GetEmployee(ctx context.Context, id uuid.UUID) (models.Employee, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployee")
	}

	var r0 models.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.Employee, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.Employee); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Employee)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmployeeList provides a mock function with given fields: ctx, cursor
func (_m *EmployeeRepository) GetEmployeeList(ctx context.Context, cursor string) (models.EmployeeList, error) {
	ret := _m.Called(ctx, cursor)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployeeList")
	}

	var r0 models.EmployeeList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.EmployeeList, error)); ok {
		return rf(ctx, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.EmployeeList); ok {
		r0 = rf(ctx, cursor)
	} else {
		r0 = ret.Get(0).(models.EmployeeList)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmployee provides a mock function with given fields: ctx, req
func (_m *EmployeeRepository) UpdateEmployee(ctx context.Context, req domain.UpdateEmployee) (models.Employee, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmployee")
	}

	var r0 models.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UpdateEmployee) (models.Employee, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UpdateEmployee) models.Employee); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.Employee)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UpdateEmployee) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEmployeeRepository creates a new instance of EmployeeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployeeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmployeeRepository {
	mock := &EmployeeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
