// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/services.go -package=mocks -mock_names=Employee=MockEmployeeService,Position=MockPositionService,Auth=MockAuthService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Verce11o/resume-view/employee-service/internal/domain"
	models "github.com/Verce11o/resume-view/employee-service/internal/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockEmployeeService is a mock of Employee interface.
type MockEmployeeService struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeServiceMockRecorder
}

// MockEmployeeServiceMockRecorder is the mock recorder for MockEmployeeService.
type MockEmployeeServiceMockRecorder struct {
	mock *MockEmployeeService
}

// NewMockEmployeeService creates a new mock instance.
func NewMockEmployeeService(ctrl *gomock.Controller) *MockEmployeeService {
	mock := &MockEmployeeService{ctrl: ctrl}
	mock.recorder = &MockEmployeeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeService) EXPECT() *MockEmployeeServiceMockRecorder {
	return m.recorder
}

// CreateEmployee mocks base method.
func (m *MockEmployeeService) CreateEmployee(ctx context.Context, req domain.CreateEmployee) (models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", ctx, req)
	ret0, _ := ret[0].(models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockEmployeeServiceMockRecorder) CreateEmployee(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockEmployeeService)(nil).CreateEmployee), ctx, req)
}

// DeleteEmployee mocks base method.
func (m *MockEmployeeService) DeleteEmployee(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployee", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployee indicates an expected call of DeleteEmployee.
func (mr *MockEmployeeServiceMockRecorder) DeleteEmployee(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployee", reflect.TypeOf((*MockEmployeeService)(nil).DeleteEmployee), ctx, id)
}

// GetEmployee mocks base method.
func (m *MockEmployeeService) GetEmployee(ctx context.Context, id uuid.UUID) (models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployee", ctx, id)
	ret0, _ := ret[0].(models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployee indicates an expected call of GetEmployee.
func (mr *MockEmployeeServiceMockRecorder) GetEmployee(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployee", reflect.TypeOf((*MockEmployeeService)(nil).GetEmployee), ctx, id)
}

// GetEmployeeList mocks base method.
func (m *MockEmployeeService) GetEmployeeList(ctx context.Context, cursor string) (models.EmployeeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeList", ctx, cursor)
	ret0, _ := ret[0].(models.EmployeeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeList indicates an expected call of GetEmployeeList.
func (mr *MockEmployeeServiceMockRecorder) GetEmployeeList(ctx, cursor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeList", reflect.TypeOf((*MockEmployeeService)(nil).GetEmployeeList), ctx, cursor)
}

// UpdateEmployee mocks base method.
func (m *MockEmployeeService) UpdateEmployee(ctx context.Context, req domain.UpdateEmployee) (models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployee", ctx, req)
	ret0, _ := ret[0].(models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmployee indicates an expected call of UpdateEmployee.
func (mr *MockEmployeeServiceMockRecorder) UpdateEmployee(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployee", reflect.TypeOf((*MockEmployeeService)(nil).UpdateEmployee), ctx, req)
}

// MockPositionService is a mock of Position interface.
type MockPositionService struct {
	ctrl     *gomock.Controller
	recorder *MockPositionServiceMockRecorder
}

// MockPositionServiceMockRecorder is the mock recorder for MockPositionService.
type MockPositionServiceMockRecorder struct {
	mock *MockPositionService
}

// NewMockPositionService creates a new mock instance.
func NewMockPositionService(ctrl *gomock.Controller) *MockPositionService {
	mock := &MockPositionService{ctrl: ctrl}
	mock.recorder = &MockPositionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPositionService) EXPECT() *MockPositionServiceMockRecorder {
	return m.recorder
}

// CreatePosition mocks base method.
func (m *MockPositionService) CreatePosition(ctx context.Context, req domain.CreatePosition) (models.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePosition", ctx, req)
	ret0, _ := ret[0].(models.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePosition indicates an expected call of CreatePosition.
func (mr *MockPositionServiceMockRecorder) CreatePosition(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePosition", reflect.TypeOf((*MockPositionService)(nil).CreatePosition), ctx, req)
}

// DeletePosition mocks base method.
func (m *MockPositionService) DeletePosition(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePosition", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePosition indicates an expected call of DeletePosition.
func (mr *MockPositionServiceMockRecorder) DeletePosition(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePosition", reflect.TypeOf((*MockPositionService)(nil).DeletePosition), ctx, id)
}

// GetPosition mocks base method.
func (m *MockPositionService) GetPosition(ctx context.Context, id uuid.UUID) (models.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosition", ctx, id)
	ret0, _ := ret[0].(models.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosition indicates an expected call of GetPosition.
func (mr *MockPositionServiceMockRecorder) GetPosition(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosition", reflect.TypeOf((*MockPositionService)(nil).GetPosition), ctx, id)
}

// GetPositionList mocks base method.
func (m *MockPositionService) GetPositionList(ctx context.Context, cursor string) (models.PositionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPositionList", ctx, cursor)
	ret0, _ := ret[0].(models.PositionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPositionList indicates an expected call of GetPositionList.
func (mr *MockPositionServiceMockRecorder) GetPositionList(ctx, cursor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPositionList", reflect.TypeOf((*MockPositionService)(nil).GetPositionList), ctx, cursor)
}

// UpdatePosition mocks base method.
func (m *MockPositionService) UpdatePosition(ctx context.Context, req domain.UpdatePosition) (models.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePosition", ctx, req)
	ret0, _ := ret[0].(models.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePosition indicates an expected call of UpdatePosition.
func (mr *MockPositionServiceMockRecorder) UpdatePosition(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePosition", reflect.TypeOf((*MockPositionService)(nil).UpdatePosition), ctx, req)
}

// MockAuthService is a mock of Auth interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockAuthService) SignIn(ctx context.Context, employeeID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, employeeID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthServiceMockRecorder) SignIn(ctx, employeeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthService)(nil).SignIn), ctx, employeeID)
}
