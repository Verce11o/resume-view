// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Verce11o/resume-view/employee-service/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// PositionCacheRepository is an autogenerated mock type for the PositionCacheRepository type
type PositionCacheRepository struct {
	mock.Mock
}

// DeletePosition provides a mock function with given fields: ctx, positionID
func (_m *PositionCacheRepository) DeletePosition(ctx context.Context, positionID string) error {
	ret := _m.Called(ctx, positionID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePosition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, positionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPosition provides a mock function with given fields: ctx, key
func (_m *PositionCacheRepository) GetPosition(ctx context.Context, key string) (*models.Position, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetPosition")
	}

	var r0 *models.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Position, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Position); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPosition provides a mock function with given fields: ctx, positionID, position
func (_m *PositionCacheRepository) SetPosition(ctx context.Context, positionID string, position *models.Position) error {
	ret := _m.Called(ctx, positionID, position)

	if len(ret) == 0 {
		panic("no return value specified for SetPosition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Position) error); ok {
		r0 = rf(ctx, positionID, position)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPositionCacheRepository creates a new instance of PositionCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPositionCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PositionCacheRepository {
	mock := &PositionCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
